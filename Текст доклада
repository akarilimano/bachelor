(2 слайд)
Существующие тесты производительности суперкомпьютеров, такие как LINPACK и TPC оценивают производительность только на вычислительных задачах. Поэтому группой ученых в 2011 году был разработан тест, оценивающий эффективность вычислителных систем на задачах с интенсивной обработкой даннных.
Стандартным методом оценки производительности с помощью данного теста являются референсные реализации, предложенные авторами теста, они используют MPI,
(3 слайд)
а целью моей работы было адаптировать этот тест для парралельной субд и оценить ее эффективность. данная цель предполагала решение следующих задач:
1. Изучить архитектуру параллельной СУБД PargreSQL и спецификацию теста Graph500
2. Разработать схему базы данных для хранения графа и промежуточных данных в соответствии со спецификацией теста 
3. Выполнить проектирование и разработку алгоритмов на языке SQL, реализующих тест для параллельной СУБД PargreSQL
4. Провести вычислительные эксперименты на суперкомпьютере «Торнадо ЮУрГУ», исследующие эффективность PargreSQL на тесте Graph500
(4 слайд)
Параллельная СУБД PargreSQL была разработана на кафедре Системного программирования факультета Вычислительной математики и информатики. Она представляет из себя паралельную версию свободной СУБД PostgreSQL, в которую внедрен фрагментный паралелизм. Фрагментный паралелизм предполагает горизонтальное разбиение таблиц по узлам кластерной системы на оснве функции фрагментации, аргументом которой является колонка этой таблицы.
(5 слайд)
На данном слайде представлен алгоритм теста Graph500 согласно его спецификации.
(6 слайд)
На первом шаге алгоритма генерируется список ребер, который используется на следующем шаге при приведении данного списка в некоторое внутреннее представление,
(7 слайд)
зависящее от конкретной реализации теста.
(8 слайд)
Далее случайно выбираются 64 неизолированные вершины и
(9 слайд)
для каждой из них строится так называемое дерево обхода в ширину (BFS-дерево), в котором для каждой вершины указан ее родитель.
(10 слайд)
В зависимости от вершины, с которой начинается обход, деревья могут отличаться.
(11 слайд)
В дальнейшем для каждого дерева проводится проверка корректности, по нескольким критерием, в числе которых, необходимость существования ребер между вершинами соседнего уровня для каждого графа.
(12 слайд)
Производительность измеряется в количестве пройденных дуг в секунду, количество ребер в компоненте связности, в которой осуществлялся поиск, деленное на время, затраченное на обход в ширину.
(13 слайд)
Система реализующая тест Graph500 была названа мной Pargraph500. На слайде представлена диаграмма вариантов использования системы, Актером является Исследователь, который может генерировать граф или запустить тест на уже существующем графе.
(14 слайд)
на слайде модульная труктур, система состоит из генератора списка ребер, первого и второго ядра. генератор на основе референсной реализации, ядра используют апи PargreSQL.
(15 слайд)
мною предложены следующие классы, классы-сущности ребро и вершина и класс реализующий стандартную структуру данных очередь
(16 слайд)
Для хранения графа в СУБД используется одна таблица со следующими атрибутами, которая фрагментируется по узлам в соответствии со значением поля айди.
(17 слайд)
чтобы повысить уровень абстракции, мной был разработал набор макросов, каждый из которых реализуется SQL-запросом.
(18 слайд)
Эксперименты
(19 слайд)
Конференция
(20 слайд)
Результаты
Спасибо за внимание